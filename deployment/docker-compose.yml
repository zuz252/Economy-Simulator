version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: economy-simulator-postgres
    environment:
      POSTGRES_DB: economy_simulator
      POSTGRES_USER: economy_user
      POSTGRES_PASSWORD: economy_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./deployment/docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - economy-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U economy_user -d economy_simulator"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and message queue
  redis:
    image: redis:7-alpine
    container_name: economy-simulator-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - economy-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./src/backend
      dockerfile: Dockerfile
    container_name: economy-simulator-backend
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://economy_user:economy_password@postgres:5432/economy_simulator
      REDIS_URL: redis://redis:6379
      MCP_SERVER_URL: http://mcp-server:3001
    ports:
      - "3000:3000"
    volumes:
      - ./src/backend:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - economy-network
    restart: unless-stopped

  # Frontend Application
  frontend:
    build:
      context: ./src/frontend
      dockerfile: Dockerfile
    container_name: economy-simulator-frontend
    environment:
      NODE_ENV: development
      REACT_APP_API_URL: http://localhost:3000
      REACT_APP_MCP_SERVER_URL: http://localhost:3001
    ports:
      - "3002:3002"
    volumes:
      - ./src/frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - economy-network
    restart: unless-stopped

  # MCP Server for FFIEC UBPR Data
  mcp-server:
    build:
      context: ./src/infrastructure/mcp-servers/ffiec-ubpr-mcp-server
      dockerfile: Dockerfile
    container_name: economy-simulator-mcp-server
    environment:
      NODE_ENV: development
      FFIEC_SERVICE_URL: https://cdr.ffiec.gov/public/pws/webservices/retrievalservice.asmx
      FFIEC_USERNAME: ${FFIEC_USERNAME}
      FFIEC_PASSWORD: ${FFIEC_PASSWORD}
      LOG_LEVEL: info
    ports:
      - "3001:3001"
    volumes:
      - ./src/infrastructure/mcp-servers/ffiec-ubpr-mcp-server:/app
      - /app/node_modules
      - ./logs:/app/logs
    networks:
      - economy-network
    restart: unless-stopped

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: economy-simulator-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./deployment/docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - economy-network
    restart: unless-stopped

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: economy-simulator-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    ports:
      - "3003:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployment/docker/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - economy-network
    restart: unless-stopped

  # Logging - Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: economy-simulator-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - economy-network
    restart: unless-stopped

  # Logging - Kibana
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: economy-simulator-kibana
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - economy-network
    restart: unless-stopped

  # Logging - Logstash
  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: economy-simulator-logstash
    volumes:
      - ./deployment/docker/logstash/logstash.yml:/usr/share/logstash/config/logstash.yml
      - ./deployment/docker/logstash/pipeline:/usr/share/logstash/pipeline
    ports:
      - "5044:5044"
    depends_on:
      - elasticsearch
    networks:
      - economy-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:

networks:
  economy-network:
    driver: bridge 